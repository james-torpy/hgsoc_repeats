if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig)
} else {
sigReps[[i]] <- sig
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig)
} else {
sigReps[[i]] <- sig
}
}
# plot on volcano plot:
p <- ggplot(data=repGenes, aes( x=logFC, y=-log10(FDR),    color=threshold))
p <- p + geom_point(data=repGenes)
p <- p + geom_text_repel(data=lab, aes(label=genes))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change   vs FT control", y="-log10   FDR")
p <- p +  xlim(c(-4, 4))
if (length(FCthresh) == 0) {
if (file.exists(paste0(plotDir,   "/", Type,  "_volcano_FDR_",   FDRthresh, "_", comp, ".pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR_",   FDRthresh, "_", comp, ".pdf"))
p
} else {
print(paste0("Creating  ",plotDir, "/", Type,    "_volcano_FDR_", FDRthresh, "_", comp, ".pdf"))
pdf(file = paste0(plotDir, "/",   Type,  "_volcano_FDR_",  FDRthresh, "_", comp, ".pdf"))
print(p)
dev.off()
}
} else {
if (file.exists(paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, ".pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, ".pdf already exists"))
p
} else {
print(paste0("Creating  ", plotDir, "/",  Type,  "_volcano_FDR", FDRthresh, "_FC", FCthresh, "_", comp, ".pdf"))
pdf(file = paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, ".pdf"))
print(p)
dev.off()
}
}
if ("all" %in% resultTypes) {
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
sig <- subset(allGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes,   allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
lab <- lab[( lab$logFC > 10 | lab$logFC < -10 | lab$FDR < 10e-15 ),]
allGenes <- rbind(rbind(allGenes,   posGenes), negGenes)
lab$genes <- rownames(lab)
# add gene symbol annotations where relevant:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
# for rows with ensembl ids, annotate entrez ids and symbols in separate columns
# for lab and sig:
lab$gene_id <- egENSEMBL$gene_id[match(rownames(lab), egENSEMBL$ensembl_id)]
lab$symbol <- egSYMBOL$symbol[match(lab$gene_id, egSYMBOL$gene_id)]
sig$gene_id <- egENSEMBL$gene_id[match(rownames(sig), egENSEMBL$ensembl_id)]
sig$symbol <- egSYMBOL$symbol[match(sig$gene_id, egSYMBOL$gene_id)]
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
if (i==1) {
sigGenesList <- list(sig)
} else {
sigGenesList[[i]] <- sig
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
if (i==2) {
sigGenesList <- list(sig)
} else {
sigGenesList[[i]] <- sig
}
}
# save CCNEamp_vs_HRD for comparison with Patch 2015 data:
if ( comp == "CCNEamp_vs_HRD") {
saveRDS(allGenes, paste0(newRobjectDir, "/CCNEamp_vs_HRD_allGenes.rds"))
saveRDS(sig, paste0(newRobjectDir, "/CCNEamp_vs_HRD_sig.rds"))
write.table(DEs, file = paste0(plotDir, "DE_CCNEamp_vs_HRD.txt"), header=F, row.names = F, col.names = F)
}
# plot on volcano plot:
p <- ggplot(data=allGenes, aes( x=logFC, y=-log10(FDR), color=threshold) )
p <- p + geom_point(data=allGenes)
p <- p + geom_text_repel(data=lab, aes(label=symbol))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change   vs FT control", y="-log10   FDR")
if (length(FCthresh) == 0) {
if (file.exists(paste0(plotDir,   "/", Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))
p
} else {
print(paste0("Creating  ",plotDir, "/", Type,    "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))
pdf(file = paste0(plotDir, "/",   Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))
print(p)
dev.off()
}
} else {
if (file.exists(paste0(plotDir, "/",  Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf already exists"))
p
} else {
print(paste0("Creating  ", plotDir, "/",  Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))
pdf(file = paste0(plotDir, "/",  Type,  "_volcano_FDR_10e_neg15_", comp, "_allGenes.pdf"))
print(p)
dev.off()
}
}
}
if ("epiMods" %in% resultTypes) {
### 6. Calculate differential expression values of epigenetic modifier genes ###
# create epiGenes df:
epiGenes <- allGenes[epiIDs,]
rownames(epiGenes) <- epiSym
# set threshold status:
if (length(FCthresh) == 0) {
epiGenes$threshold <- as.factor(epiGenes$FDR < FDRthresh)
} else {
epiGenes$threshold <- as.factor((epiGenes$FDR < FDRthresh & epiGenes$logFC < -(FCthresh))|(epiGenes$FDR <
FDRthresh & epiGenes$logFC > FCthresh))
}
# create significant epiGenes df:
epiSig <- subset(epiGenes, threshold == T)
epiGenes$genes <- rownames(epiGenes)
if (!(ctlInd==1)) {
if (i==1) {
allEpi <- list(epiGenes)
} else {
allEpi[[i]] <- epiGenes
}
} else {
if (i==2) {
allEpi <- list(epiGenes)
} else {
allEpi[[i]] <- epiGenes
}
}
# create volcano plots with repeat values in grey in background:
p <- ggplot(data=epiGenes, aes(x=logFC, y=-log10(FDR),color=threshold))
p <- p + geom_point(data=epiGenes)
p <- p + geom_text_repel(data=epiGenes, aes(label=genes))
p <- p + theme(legend.position = "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10   FDR")
p <- p +  xlim(c(-2, 2))
if (length(FCthresh) == 0) {
if (file.exists(paste0(plotDir,   "/", Type,  "_volcano_FDR_",   FDRthresh, "_", comp, "_epi.pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR_",   FDRthresh, "_", comp, "_epi.pdf"))
p
} else {
print(paste0("Creating  ",plotDir, "/", Type,    "_volcano_FDR_", FDRthresh, "_", comp, "_epi.pdf"))
pdf(file = paste0(plotDir, "/",   Type,  "_volcano_FDR_",  FDRthresh, "_", comp, "_epi.pdf"))
print(p)
dev.off()
}
} else {
if (file.exists(paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, "_epi.pdf"))) {
print(paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, "_epi.pdf already exists"))
p
} else {
print(paste0("Creating  ", plotDir, "/",  Type,  "_volcano_FDR", FDRthresh, "_FC", FCthresh, "_", comp, "_epi.pdf"))
pdf(file = paste0(plotDir, "/",  Type,  "_volcano_FDR",   FDRthresh, "_FC", FCthresh, "_", comp, "_epi.pdf"))
print(p)
dev.off()
}
}
}
}
con <- c(rep(0, (ctlInd - 1) ), -1, rep(0, (ncol(design) - ctlInd)))
}
}
### 8. Save all repeat DE, and all repeat DE that is significant and log2 FC > 1 for at least one comparison:
# remove the NULL list dfs created when avoiding clt vs ctl:
if (length(sTypes)>2) {
allReps <- allReps[-ctlInd]
sigReps <- sigReps[-ctlInd]
}
# name the list elements:
names(allReps) <- paste0(sTypes[-ctlInd], "_vs_", ctl)
names(sigReps) <- paste0(sTypes[-ctlInd], "_vs_", ctl)
# save each list for downstream analysis:
saveRDS(allReps, file=paste0(newRobjectDir, "/", Type, "_DEreps.rds"))
# do above for epi genes if necessary:
if ("epiMods" %in% resultTypes) {
allEpi <- allEpi[-ctlInd]
names(allEpi) <- paste0(sTypes[-ctlInd], "_vs_", ctl)
saveRDS(allEpi, file=paste0(newRobjectDir, "/", Type, "_DEepiGenes.rds"))
}
# don't just want significant genes for each individual group, so find names of
# all the sig genes from all groups by taking the rownames and unlisting into one vector:
totalSig <- unique(unlist(lapply(sigReps, function(x) {
return(rownames(x))
})))
names(totalSig) <- NULL
# fetch all the entries for the above significant repeat names and save:
allSig <- lapply(allReps, function(x) {
return(x[totalSig,])
})
saveRDS(allSig, file=paste0(newRobjectDir, "/", Type, "_DEsigReps.rds"))
if (!file.exists(paste0(newRobjectDir, "DEImg_", expName, ".RData"))) {
save.image(file = paste0(newRobjectDir, "DEImg_", expName, ".RData"))
}
colnames(design])
colnames(design)
i=2
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
comp
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists, no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
DEs
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
sig <- subset(allGenes, threshold == T)
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes,   allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses  for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
lab <- lab[( lab$logFC > 10 | lab$logFC < -10 | lab$FDR < 10e-15 ),]
allGenes <- rbind(rbind(allGenes,   posGenes), negGenes)
lab$genes <- rownames(lab)
# add gene symbol annotations where relevant:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
# for rows with ensembl ids, annotate entrez ids and symbols in separate columns
# for lab and sig:
lab$gene_id <- egENSEMBL$gene_id[match(rownames(lab), egENSEMBL$ensembl_id)]
lab$symbol <- egSYMBOL$symbol[match(lab$gene_id, egSYMBOL$gene_id)]
sig$gene_id <- egENSEMBL$gene_id[match(rownames(sig), egENSEMBL$ensembl_id)]
sig$symbol <- egSYMBOL$symbol[match(sig$gene_id, egSYMBOL$gene_id)]
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
if (i==1) {
sigGenesList <- list(sig)
} else {
sigGenesList[[i]] <- sig
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
if (i==2) {
sigGenesList <- list(sig)
} else {
sigGenesList[[i]] <- sig
}
}
DEs
write.table(DEs, file = paste0(plotDir, "DE_CCNEamp_vs_HRD.txt"), header=F, row.names = F, col.names = F)
write.table(DEs, file = paste0(plotDir, "DE_CCNEamp_vs_HRD.txt"), row.names = F, col.names = F)
paste0(plotDir, "DE_CCNEamp_vs_HRD.txt")
rm(list=ls())
### 19.patch_compare.R ###
# This script takes a CCNEamp vs HRD comparison and compares it with DE genes from
# Patch et. al. 2015:
# Run on cluster with:
#briR
#qsub -N patchcomp -b y -wd \
#/share/ClusterShare/thingamajigs/jamtor/projects/hgsoc_repeats/RNA-seq/logs/exp9/DE \
#-j y -R y -pe smp 2 -V
#"Rscript /share/ClusterShare/thingamajigs/jamtor/projects/hgsoc_repeats/RNA-seq/scripts/repeatsPipeline/exp9/19.patch_compare.R"
### 0. Define variables/paths ###
# load packages needed:
library(tibble)
library(dplyr)
library(org.Hs.eg.db)
library(pheatmap)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "all"
descrip <- "htseq_EdgeR_htseq_vs_patch"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
rawDir <- paste0(projectDir, "/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/DEcompare/htseq_EdgeR_HGSOC_CCNEamp_unknown_vs_HRD/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/DEcompare/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/DEcompare/", descrip, "/")
system(paste0("mkdir -p ", newRobjectDir))
system(paste0("mkdir -p ", plotDir))
### 1. Load in data ###
# load in my DE data:
allGenes <- readRDS(paste0(RobjectDir, "/CCNEamp_vs_HRD_allGenes.rds"))
sig <- readRDS(paste0(RobjectDir, "/CCNEamp_vs_HRD_sig.rds"))
# load in Patch data:
patch <- read.csv(file=paste0(rawDir, "/CCNEamp_vs_HRD_Patch_DE.csv"), header=T, fill=T)
colnames(patch)[1] <- "symbol"
### 2. Create volcano plot comparing DE genes common to my DE and Patch DE analysis ###
patch_comp <- dplyr::select(merge(sig, patch, by="symbol"), symbol, logFC.x, FDR, logFC.y, Adjusted.P.value)
colnames(patch_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
temp1 <- patch_comp[,c(1, 4, 5)]
colnames(temp1) <- c("symbol", "logFC", "adjPvalue_FDR")
temp1$type <- "patch"
temp1$threshold <- FALSE
temp1$threshold[temp1$adjPvalue_FDR < 0.005] <- TRUE
temp1$typethresh <- paste0(temp1$type, temp1$threshold)
temp2 <- patch_comp[,c(1, 2, 3)]
colnames(temp2) <- c("symbol", "logFC", "adjPvalue_FDR")
temp2$type <- "sig"
temp2$threshold <- FALSE
temp2$threshold[temp2$adjPvalue_FDR < 0.005] <- TRUE
temp2$typethresh <- paste0(temp2$type, temp2$threshold)
patch_comp_sep <- rbind(temp1, temp2)
lab3 <- patch_comp_sep[patch_comp_sep$threshold == TRUE,]
# plot on volcano plot:
p <- ggplot(data=patch_comp_sep, aes( x=logFC, y=-log10(adjPvalue_FDR), color=type) )
p <- p + geom_point(data=patch_comp_sep)
p <- p + geom_text_repel(data=lab3, aes(label=symbol))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change   vs FT control", y="-log10   FDR")
#p <- p +  ylim(c(0, 45))
if (file.exists(paste0(plotDir, "/",  Type, "_CCNEamp_vs_HRD_common_sig_and_patch_volcano.pdf"))) {
print(paste0(plotDir, "/",  Type, "_CCNEamp_vs_HRD_common_sig_and_patch_volcano.pdf already exists"))
p
} else {
print(paste0("Creating  ", plotDir, "/",  Type, "_CCNEamp_vs_HRD_common_sig_and_patch_volcano.pdf"))
pdf(file = paste0(plotDir, "/",  Type, "_CCNEamp_vs_HRD_common_sig_and_patch_volcano.pdf"))
print(p)
dev.off()
}
### 3. Create volcano plot with all significant DE genes from my analysis and Patch 2015 analysis:
temp1 <- patch[,c(1, 2, 6)]
colnames(temp1) <- c("symbol", "logFC", "adjPvalue_FDR")
temp1$type <- "patch"
temp1$threshold <- FALSE
temp1$threshold[temp1$adjPvalue_FDR < 0.005] <- TRUE
temp1$typethresh <- paste0(temp1$type, temp1$threshold)
temp2 <- sig[,c(8, 1, 5)]
colnames(temp2) <- c("symbol", "logFC", "adjPvalue_FDR")
temp2$type <- "sig"
temp2$threshold <- FALSE
temp2$threshold[temp2$adjPvalue_FDR < 10e-20] <- TRUE
temp2$typethresh <- paste0(temp2$type, temp2$threshold)
patch_and_sig <- rbind(temp1, temp2)
lab2 <- patch_and_sig[patch_and_sig$threshold == TRUE,]
# plot on volcano plot:
p <- ggplot(data=patch_and_sig, aes( x=logFC, y=-log10(adjPvalue_FDR), color=typethresh) )
p <- p + geom_point(data=patch_and_sig)
p <- p + geom_text_repel(data=lab2, aes(label=symbol))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change   vs FT control", y="-log10   FDR")
p <- p +  ylim(c(0, 45))
if (file.exists(paste0(plotDir, "/",  Type, "_CCNEamp vs HRD_sig_vs_patch.pdf"))) {
print(paste0(plotDir, "/",  Type, "_CCNEamp vs HRD_sig_vs_patch.pdf already exists"))
p
} else {
print(paste0("Creating  ", plotDir, "/",  Type, "_CCNEamp vs HRD_sig_vs_patch.pdf"))
pdf(file = paste0(plotDir, "/",  Type, "_CCNEamp vs HRD_sig_vs_patch.pdf"))
print(p)
dev.off()
}
### 4. Create heatmap comparing expression between my DE analysis and Patch 2015 for genes reported DE in Patch ###
patch_comp <- dplyr::select(merge(allGenes, patch, by="symbol"), symbol, logFC.x, FDR, logFC.y, Adjusted.P.value)
colnames(patch_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
# split into logFC and FDR dfs:
rownames(patch_comp) <- patch_comp$symbol
FC <- dplyr::select(patch_comp, my_logFC, Patch_logFC)
FDR <- dplyr::select(patch_comp, my_FDR, Patch_adj_Pvalue)
# create logFC and FDR heatmaps:
# resize margins for plots:
par(mar=c(4,4,4,4))
library(grid)
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust = 0.5, hjust = 1, rot = 45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
pdf(file = paste0(plotDir, "/htseq_vs_patch_CCNEamp_vs_HRD_heatmap.pdf"))
pheatmap(FC, color = colorRampPalette(c("white", "firebrick3"))(50),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8)
dev.off()
### 3. Create heatmap comparing expression between Patch 2015 and my DE analysis for top 200 genes reported DE in my analysis ###
sig_comp <- dplyr::select(merge(sig, patch, by="symbol"), symbol, logFC.x, FDR, logFC.y, Adjusted.P.value)
colnames(sig_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
# split into logFC and FDR dfs:
rownames(sig_comp) <- sig_comp$symbol
FC <- dplyr::select(sig_comp, my_logFC, Patch_logFC)
FDR <- dplyr::select(sig_comp, my_FDR, Patch_adj_Pvalue)
# create logFC and FDR heatmaps:
# resize margins for plots:
par(mar=c(4,4,4,4))
library(grid)
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust = 0.5, hjust = 1, rot = 45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
pdf(file = paste0(plotDir, "/htseq_vs_patch_CCNEamp_vs_HRD_heatmap.pdf"))
pheatmap(FC, color = colorRampPalette(c("white", "firebrick3"))(50),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8)
dev.off()
patch_and_sig
p <- ggplot(data=patch_and_sig, aes( x=logFC, y=-log10(adjPvalue_FDR), color=typethresh) )
p <- p + geom_point(data=patch_and_sig)
p <- p + geom_text_repel(data=lab2, aes(label=symbol))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change   vs FT control", y="-log10   FDR")
p <- p +  ylim(c(0, 45))
p
grep("NKX", symbol$patch_and_sig)
grep("NKX", patch_and_sig$symbol)
1. 1. 1.     1 	Click Track	 	2	    110. 0. 0.     0
patch_and_sig[227,]
patch_and_sig[624,]
patch_and_sig[1120,]
rm(list=ls())
