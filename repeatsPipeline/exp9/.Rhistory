# estimate dispersion:
y <- estimateGLMCommonDisp(y, design)
y <- estimateGLMTagwiseDisp(y, design)
# adjust values using dispersion:
fit <- glmFit(y, design)
saveRDS(fit, file=paste0(RobjectDir, "/", Type, "DEfit.rds"))
#fit <- readRDS(file=paste0(RobjectDir, "/", Type, "DEfit.rds"))
con <- c(-1, rep(0, (length(STypes)-1)))
for (i in 1:length(STypes)) {
if (i!=1) {
comp <- paste0("FT_vs_", STypes[i])
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
create_rds <- function(x, rds) {
if (file.exists(rds)) {
print(paste0(rds, " exists, no need to create"))
} else {
print(paste0("Creating ", rds))
saveRDS(x, file = rds)
}
}
create_rds(lrt, paste0(RobjectDir, "FT_vs_", STypes[i],   "_lrt.rds"))
### 5. Calculate differential expression values with FDR threshold only ###
# PCA and RLE plots of RUVseq RUVr-normalised data looked   best with etween lane normalisation = 	'full',  will go  with this #
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
thresh <- 0.05
allGenes <- as.data.frame(topTags(lrt, n=Inf))
repGenes <- allGenes[grep("ENS", rownames(allGenes), invert   = T),]
sigGenes <- filter(repGenes, FDR<thresh)
print(repGenes)
# add negative log p-value column to allGenes:
#allGenes$negLog10PValue <- -log10(allGenes$PValue)
# plot on volcano plot:
repGenes$threshold <- as.factor(repGenes$FDR < thresh)
sig <- subset(repGenes, threshold == T)
# include the control genes for labelling:
# add positive and negative control genes CD47, CCNE1,  GAPDH, b-actin:
posGenes <- rbind(allGenes["ENSG00000196776",],   allGenes["ENSG00000105173",])
negGenes <- rbind(allGenes["ENSG00000075624",],   allGenes["ENSG00000204574",],
allGenes["ENSG00000104904",], allGenes["ENSG00000089157",])
rownames(posGenes) <- c("CD47", "CCNE1")
rownames(negGenes) <- c("beta-actin", "ABCF1",   "OAZ1", "RPLP0")
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR<thresh,])>0) {
posGenes[posGenes$FDR<thresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR<thresh,])>0) {
negGenes[negGenes$FDR<thresh,]$threshold <- "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes, posGenes), negGenes)
lab$genes <- rownames(lab)
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[(i-1)]] <- repGenes
}
if (i==2) {
sigReps <- list(sig)
} else {
sigReps[[(i-1)]] <- sig
}
p <- ggplot(data=repGenes, aes(x=logFC, y=-log10(FDR),  color=threshold))
p <- p + geom_point(data=repGenes)
p <- p + geom_text_repel(data=lab, aes(label=genes))
p <- p + theme(legend.position = "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10   FDR")
p <- p +  xlim(c(-7, 7))
#if (file.exists(paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, comp, ".pdf"))) {
#  print(paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, comp, ".pdf"))
#  p
#} else {
print(paste0("Creating ",plotDir, "/", Type,  "_volcano_FDR", thresh, comp, ".pdf"))
pdf(file = paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, comp, ".pdf"))
print(p)
dev.off()
#}
### 6. Calculate differential expression values with FDR and FC thresholds ###
# PCA and RLE plots of RUVseq RUVr-normalised data looked   best with etween lane normalisation = 	'full',  will go  with this #
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
thresh <- 0.05
FCthresh <- 1
allGenes <- as.data.frame(topTags(lrt, n=Inf))
repGenes <- allGenes[grep("ENS", rownames(allGenes), invert = T),]
sigGenes <- filter(repGenes, (FDR < thresh & logFC < -(FCthresh))|(FDR < thresh & logFC > FCthresh))
print(repGenes)
# add negative log p-value column to allGenes:
#allGenes$negLog10PValue <- -log10(allGenes$PValue)
# plot on volcano plot:
repGenes$threshold <- as.factor((repGenes$FDR < thresh & repGenes$logFC < -(FCthresh))|(repGenes$FDR <  thresh & repGenes$logFC > FCthresh))
sig <- subset(repGenes, threshold == T)
# include the control genes for labelling:
# add positive and negative control genes CD47, CCNE1,  GAPDH, b-actin:
posGenes <- rbind(allGenes["ENSG00000091831",],   allGenes["ENSG00000196776",],   allGenes["ENSG00000105173",])
negGenes <- rbind(allGenes["ENSG00000111640",],   allGenes["ENSG00000075624",],   allGenes["ENSG00000204574",],
allGenes["ENSG00000104904",],   allGenes["ENSG00000089157",])
rownames(posGenes) <- c("ESR1", "CD47", "CCNE1")
rownames(negGenes) <- c("GAPDH", "beta-actin", "ABCF1",   "OAZ1", "RPLP0")
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR<thresh,])>0) {
posGenes[posGenes$FDR<thresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR<thresh,])>0) {
negGenes[negGenes$FDR<thresh,]$threshold <- "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes, posGenes), negGenes)
lab$genes <- rownames(lab)
p <- ggplot(data=repGenes, aes(x=logFC, y=-log10(FDR),  color=threshold))
p <- p + geom_point(data=repGenes)
p <- p + geom_text_repel(data=lab, aes(label=genes))
p <- p + theme(legend.position = "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10   FDR")
p <- p +  xlim(c(-7, 7))
#if (file.exists(paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, "_logFC", FCthresh, "_", comp,  ".pdf"))) {
#  print(paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, "_logFC", FCthresh, "_", comp, ".pdf"))
#  p
#} else {
print(paste0("Creating ",plotDir, "/", Type,  "_volcano_FDR", thresh, "_logFC", FCthresh, "_", comp,  ".pdf"))
pdf(file = paste0(plotDir, "/", Type,  "_volcano_FDR", thresh, "_logFC", FCthresh, "_", comp, ".pdf"))
print(p)
dev.off()
#}
saveRDS(repGenes, file=paste0(RobjectDir, "/", Type, "_allDErep", thresh, "_logFC", FCthresh, "_", comp,  ".rds"))
con <- c(-1, rep(0, (length(STypes)-1)))
}
}
names(allReps) <- paste0("FT_vs_", STypes[-1])
names(sigReps) <- paste0("FT_vs_", STypes[-1])
saveRDS(allReps, file=paste0(RobjectDir, "/", Type, "_DEreps.rds"))
# don't just want significant genes for each individual group, so find names of
# all the sig genes from all groups by taking the rownames and unlisting into one vector:
totalSig <- unique(unlist(lapply(sigReps, function(x) {
return(rownames(x))
})))
names(totalSig) <- NULL
# fetch all the entries for the above significant repeat names and save:
allSig <- lapply(allReps, function(x) {
return(x[totalSig,])
})
saveRDS(allSig, file=paste0(RobjectDir, "/", Type, "_DEsigReps.rds"))
if (!file.exists(paste0(RobjectDir, "DEImg_", expName, ".RData"))) {
save.image(file = paste0(RobjectDir, "DEImg_", expName, ".RData"))
}
#load(file = paste0(RobjectDir, "DEImg_", expName, ".RData"))
head(custom3Counts)
head(gcCounts)
setdiff(colnames(gcCounts), colnames(custom3Counts))
ncol(gcCounts)
ncol(custom3Counts)
head(subset(custom3Counts, select=colnames(gcCounts))
)
com_cols <- intersect(colnames(gcCounts), colnames(custom3Counts))
com_cols
colnames(gcCounts)
colnames(custom3Counts)
paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds")
rm(list=ls())
### 4c.prepare_gcCounts.R ###
# breaks cCounts up into dataframe for each class and saves each as RData objects #
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
#homeDir <- "/share/ScratchGeneral/jamtor/"
homeDir <- "/Users/jamestorpy/clusterHome"
projectDir <- paste0(homeDir, "/projects/", project, "/")
resultsDir <- paste0(projectDir, "/RNA-seq/results/")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
inDir <- paste0(resultsDir, "/htseq/", expName, "/")
plotDir <- paste0(inDir, "/plots/linePlots/")
rawDir <- paste0(projectDir, "/RNA-seq/raw_files/fullsamples/bowtell_primary/")
system(paste0("mkdir -p ", RobjectDir))
system(paste0("mkdir -p ", plotDir))
### 1. Load in repeat counts ###
# load in custom3 counts for samples run through the whole pipeline:
compFiles <- as.character(read.table(paste0(inDir, "/completed_files.txt"))[,1])
# load in custom3_countFiles into a df:
for (i in 1:length(compFiles)) {
if (i==1) {
print(compFiles[i])
Counts <- data.frame(read.table(file=paste0(inDir, "/", compFiles[i], "/", compFiles[i], ".custom3.htseq.txt")))
} else {
print(compFiles[i])
Counts <- cbind(Counts, read.table(file=paste0(inDir, "/", compFiles[i], "/", compFiles[i], ".custom3.htseq.txt"))[,2])
}
}
colnames(Counts) <- c("gene_id", compFiles)
# remove duplicate rows:
Counts <- unique(Counts)
# remove specs lines:
Counts <- Counts[grep("__", Counts$gene_id, invert=T),]
### 2. Replace uIDs with patient ids:
# load in patient ids:
#Key <- read.table(file=paste0(rawDir, "/sampleKey.txt"), sep=" ", fill=T)[,3:4]
#Key <- Key[3:nrow(Key),]
#Key$V4 <- gsub("_[A-Z].*$", "", gsub("^.*AOCS_", "AOCS_", Key$V4))
#Key <- Key[with(Key, order(V3)), ]
#
## only include samples in cCounts:
#Key <- dplyr::filter(Key, Key$V3 %in% colnames(Counts))
#newNames <- paste0(Key$V4, "_", gsub("[0-9]", "", colnames(subset(Counts, select=-gene_id))))
#newNames[duplicated(newNames)] <- gsub("AOCS", "AOCS2", newNames[duplicated(newNames)])
#newNames[duplicated(newNames)] <- gsub("AOCS2", "AOCS3", newNames[duplicated(newNames)])
#colnames(Counts)[2:ncol(Counts)] <- newNames
# load in patient ids:
Key <- read.table(file=paste0(rawDir, "/sampleKey.txt"), sep=" ", fill=T)[,3:4]
Key <- Key[3:nrow(Key),]
Key$V4 <- gsub("_[A-Z].*$", "", gsub("^.*AOCS_", "AOCS_", Key$V4))
Key <- Key[with(Key, order(V3)), ]
# renames duplicate sample names:
Key <- dplyr::filter(Key, Key$V3 %in% colnames(Counts))
newNames <- paste0(Key$V4, "_", gsub("[0-9]", "", colnames(subset(Counts, select=-gene_id))))
newNames[duplicated(newNames)] <- gsub("AOCS", "AOCS2", newNames[duplicated(newNames)])
newNames[duplicated(newNames)] <- gsub("AOCS2", "AOCS3", newNames[duplicated(newNames)])
Key$V4 <- gsub("\\_[a-zA-Z].*$", "", newNames)
# change colnames of Counts:
m <- match(colnames(Counts), Key$V3)
colnames(Counts) <- gsub("NA_", "",
gsub("[0-9]$", "",
gsub(
"[0-9][0-9]$", "", paste0(Key$V4[m], "_", colnames(Counts))
)
)
)
# save the counts:
if (!file.exists(paste0(RobjectDir, "/", Type, "_allcounts.htseq.rds"))) {
saveRDS(Counts, file=paste0(RobjectDir, "/custom3_allcounts.htseq.rds"))
}
saveRDS(Counts, file=paste0(RobjectDir, "/custom3_allcounts.htseq.rds"))
rm(list=ls())
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
### 1. Load in all counts ###
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
gcCounts <- readRDS(paste0(RobjectDir,
"/gc_allcounts.htseq.rds"))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(custom3Counts)
), value=T, invert = T
)
)
# append GCcountsDF to each GRanges object of custom1Counts:
Counts <- rbind(custom3Counts, gcCounts)
# make rownames gene_id, get rid of latter column and change
# storage mode from factor to integer:
Rnames <- Counts$gene_id
Counts <- sapply(subset(Counts, select=-gene_id), unlist)
storage.mode(Counts) <- "integer"
Counts <- as.data.frame(Counts)
rownames(Counts) <- Rnames
head(custom3Counts)
colnames(custom3Counts)
colnames(gcCounts)
grep("AOCS_128_prPT", colnames(custom3Counts))
rm(list=ls())
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- "/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/Robjects/exp9/"
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
### 1. Load in all counts and subset for genes of interest ###
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
# remove pAF sample:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(Counts)
), value=T, invert = T
)
)
#sigReps <- readRDS(paste0(RobjectDir, "/sigReps_pvalue_0.01_FC_1.rds"))
sigReps <- c("(CATTC)n", "HSAT5", "Helitron1Na_Mam", "Helitron1Nb_Mam", "L1P5", "GSATX", "GSAT","HSATII", "ACRO1")
Counts <- Counts[sigReps,]
head(Counts)
# calculate total repeat count size:
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# log CPMRs:
logCPMR = log10(CPMR+1)
logCMPR
logCPMR
pheatmap(logCPMR, fontsize = 7, cluster_cols = F)
library(pheatmap)
pheatmap(logCPMR, fontsize = 7, cluster_cols = F)
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
# remove pAF sample:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(Counts)
), value=T, invert = T
)
)
Counts
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# log CPMRs:
logCPMR = log10(CPMR+1)
pheatmap(logCPMR, fontsize = 7, cluster_cols = F)
plotDir
pdf(paste0(plotDir, "/repeatCPMRhmap.pdf"))
pheatmap(logCPMR, fontsize = 7, cluster_cols = F)
dev.off()
nrow(CPMR)
p <- pheatmap(logCPMR, fontsize = 7, cluster_cols = F)
logCPMRclust <- cbind(logCPMR,
cluster = cutree(res$tree_row,
k = 4))
logCPMRclust <- cbind(logCPMR,
cluster = cutree(p$tree_row,
k = 4))
logCPMRclust
cl1 <- logCPMRclust[logCPMRclust$cluster==1,]
cl1
?list
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==1,])
} else {
clusters[[2]] <- logCPMRclust[logCPMRclust$cluster==1,]
}
}
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==1,])
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==1,]
}
}
clusters
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
}
}
clusters
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
pheatmap(clusters[[i]], fontsize = 7, cluster_cols = F)
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
pheatmap(clusters[[i]], fontsize = 7, cluster_cols = F)
}
}
1:nrow(clusters[[i]])
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
pheatmap(clusters[[i]][1:(nrow(clusters[[i]])-1)], fontsize = 7, cluster_cols = F)
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
pheatmap(clusters[[i]][1:(nrow(clusters[[i]])-1)], fontsize = 7, cluster_cols = F)
}
}
df <- subset(clusters[[i]], select=-cluster)
df
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
df <- subset(clusters[[i]], select=-cluster)
pheatmap(df, fontsize = 7, cluster_cols = F)
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
df <- subset(clusters[[i]], select=-cluster)
pheatmap(df, fontsize = 7, cluster_cols = F)
}
}
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap" + i + ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap" + i + ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
}
}
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap" + as.character(i) + ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap" + as.character(i) + ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
}
}
as.character(i)
class(as.character(i))
for (i in 1:4) {
if (i==1) {
clusters <- list(logCPMRclust[logCPMRclust$cluster==i,])
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap", as.character(i), ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
} else {
clusters[[i]] <- logCPMRclust[logCPMRclust$cluster==i,]
df <- subset(clusters[[i]], select=-cluster)
pdf(paste0(plotDir, "/repeatLogCPMRhmap", as.character(i), ".pdf"))
pheatmap(df, fontsize = 7, cluster_cols = F)
dev.off()
}
}
paste0(plotDir, "/repeatLogCPMRhmap", as.character(i), ".pdf")
pheatmap(CPMR, fontsize = 7, cluster_cols = F)
library(GenomicRanges)
library(ShortRead)
library(rtracklayer)
library("BSgenome.Hsapiens.UCSC.hg38")
library(ggplot2)
library(reshape2)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "projects/", project, "/RNA-seq/")
htseqDir <- paste0(projectDir, "/results/htseq/", expName, "/")
STARgcDir <- paste0(projectDir, "/results/star/GC/", expName, "/")
STARriboDir <- paste0(projectDir, "/results/star/ribo/", expName, "/")
RobjectDir <- paste0(projectDir, "/Robjects/", expName, "/")
plotDir <- paste0(projectDir, "/results/R/", expName, "/plots/QC/")
rawDir <- paste0(projectDir, "/raw_files/fullsamples/bowtell_primary/")
gencodeDir <- paste0(homeDir, "/genomes/hg38_ercc/")
gencodeName <- "gencode_v24_hg38_annotation.gtf"
htseqDir <- paste0(resultsDir, "/htseq/", expName, "/")
# create plotDir:
system(paste0("mkdir -p ", plotDir))
print(paste0("The outDir is: ", plotDir))
### 1. Fetch total gc counts ###
gcCounts <- readRDS(file=paste0(RobjectDir, "/gc_allcounts.htseq.rds"))
rownames(gcCounts) <- gcCounts$gene_id
gcCounts <- subset(gcCounts, select=-gene_id)
head(gcCounts)
gcCounts
gcCounts <- readRDS(file=paste0(RobjectDir, "/gc_allcounts.htseq.rds"))
rownames(gcCounts) <- gcCounts$gene_id
gcCounts <- subset(gcCounts, select=-gene_id)
