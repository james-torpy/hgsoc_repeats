# create FDR pheatmap with column clustering:
#pdf(file=paste0(plotDir, "/log10_FDR_HGSOC_heatmap_colclustering_", names(allGene)[j], ".pdf"), width=10, height=10)
#pheatmap(logfdrDF, color = colorRampPalette(c("#08519C", "white"))(50),
#         display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")), fontsize = 8)
#dev.off()
# isolate most significant genes and create FC heatmap:
interesting_fc <- fcDF %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(fdrDF < FDRthresh & fcDF > FCthresh|fcDF < -FCthresh) >= 1) %>%
column_to_rownames('gene_id')
# create fdr for interesting repeats:
interesting_fdr <-  fdrDF[rownames(interesting_fc),]
# save interesting repeats:
if (j==1) {
saveRDS(rownames(interesting_fc), file=paste0(RobjectDir, "/interesting_fc.rds"))
}
if (nrow(interesting_fc) > 1) {
# FC without clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_colclustering.pdf"), width=10, height=10)
#pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*", "")), fontsize = 8,
#         cluster_cols = F)
#dev.off()
# FC with clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_no_colclustering.pdf"), width=10, height=10)
#pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*", "")), fontsize = 8,
#         cluster_cols = T)
#dev.off()
# FC with clustering, manual breaks:
paletteLength <- 50
myBreaks <- c(seq(min(fcDF), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(fcDF)/paletteLength, max(fcDF), length.out=floor(paletteLength/2)))
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC", FCthresh, "_colclustering_",
names(allGene)[j], ".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*", "")), fontsize = 8,
cluster_cols = T,  breaks=myBreaks)
dev.off()
# FDR without clustering:
#log_interesting_fdr <- log10(interesting_fdr)
#pdf(file=paste0(plotDir, "/log10_FDR_HGSOC_heatmapFDR", FDRthresh, "_colclustering_", names(allGene)[j], ".pdf"), width=10, height=10)
#pheatmap(logfdrDF, color = colorRampPalette(c("#08519C", "white"))(50),
#         display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")), fontsize = 8,
#         cluster_cols = F)
#dev.off()
# FDR with clustering:
pdf(file=paste0(plotDir, "/log10_FDR_HGSOC_heatmapFDR", FDRthresh, "_FC", FCthresh, "colclustering_", names(allGene)[j], ".pdf"), width=10, height=10)
pheatmap(logfdrDF, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")), fontsize = 8)
dev.off()
}
}
rm(list=ls())
library(reshape2)
library(ggplot2)
library(pheatmap)
library(tibble)
library(dplyr)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
descrip <- "htseq_hgsoc_split_by_drug_response_acquired_resistant_vs_rest"
# specify what combination of repeat genes (repeats), epigenetic modulators (epiMods),
# RNAi genes (RNAi) and protein-coding genes (pCoding) should contribute to the results:
resultTypes <- c("repeats")
# specify what FDR and log2 fold change thresholds were used:
FDRthresh <- 0.05
FCthresh <- 0
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
#homeDir <- "/Users/jamestorpy/Documents/Garvan/phd"
projectDir <- paste0(homeDir, "/projects/", project, "/RNA-seq/")
resultsDir <- paste0(projectDir, "/results")
RobjectDir <- paste0(projectDir, "/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", RobjectDir))
system(paste0("mkdir -p ", plotDir))
### 1. Load in inputs ###
# load each comparison:
comparisons <- list(readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_resistant/", Type, "_DEsigReps.rds")))
comparisons[[2]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_drug_responders/", Type, "_DEsigReps.rds"))
comparisons[[3]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_ascites/", Type, "_DEsigReps.rds"))
comparisons[[4]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_metastatic/", Type, "_DEsigReps.rds"))
names(comparisons) <- c("vsResistant", "vsDrugResponders", "vsAscites", "vsMetastatic")
library(reshape2)
library(ggplot2)
library(pheatmap)
library(tibble)
library(dplyr)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
descrip <- "htseq_hgsoc_split_by_drug_response_acquired_resistant_vs_rest"
# specify what combination of repeat genes (repeats), epigenetic modulators (epiMods),
# RNAi genes (RNAi) and protein-coding genes (pCoding) should contribute to the results:
resultTypes <- c("repeats")
# specify what FDR and log2 fold change thresholds were used:
FDRthresh <- 0.05
FCthresh <- 0
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
#homeDir <- "/Users/jamestorpy/Documents/Garvan/phd"
projectDir <- paste0(homeDir, "/projects/", project, "/RNA-seq/")
resultsDir <- paste0(projectDir, "/results")
RobjectDir <- paste0(projectDir, "/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", RobjectDir))
system(paste0("mkdir -p ", plotDir))
### 1. Load in inputs ###
# load each comparison:
comparisons <- list(readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_resistant/", Type, "_DEsigReps.rds")))
comparisons[[2]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_drug_responders/", Type, "_DEsigReps.rds"))
comparisons[[3]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_ascites/", Type, "_DEsigReps.rds"))
comparisons[[4]] <- readRDS(file=paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_metastatic/", Type, "_DEsigReps.rds"))
names(comparisons) <- c("vsResistant", "vsDrugResponders", "vsAscites", "vsMetastatic")
# fetch acquired resistance DFs and add to list:
for (n in 1:length(comparisons)) {
ind <- grep("acquired_resistant", names(comparisons[[n]]))
if (n==1) {
allGene <- list(comparisons[[n]][[ind]])
names(allGene)[n] <- names(comparisons[[n]])[ind]
} else {
allGene[[n]] <- comparisons[[n]][[ind]]
names(allGene)[n] <- names(comparisons[[n]])[ind]
}
}
# fetch sample number to add to colnames:
sample_nos <- readRDS(paste0(projectDir, "/Robjects/exp9/htseq_hgsoc_split_by_drug_response_vs_resistant//sample_no_per_cat.rds"))
# add sample numbers per group to names:
Names <- names(allGene)
for (i in 1:length(Names)) {
names <- c(strsplit(Names[i], "_vs_")[[1]][1], strsplit(Names[i], "_vs_")[[1]][2])
nos <- c(sample_nos[grep(names[1], names(sample_nos))], sample_nos[grep(names[2], names(sample_nos))])
if (i==1) {
newNames <- c(paste0(names[1], "_vs_", names[2], " (n=", nos[1], ",", nos[2], ")"))
} else {
newNames[i] <- paste0(names[1], "_vs_", names[2], " (n=", nos[1], ",", nos[2], ")")
}
}
names(allGene) <- newNames
### 2. Split into logFC and FDR dfs:
allFC <- as.data.frame(do.call("rbind", allGene))
allFC$sample <- gsub("\\..*$", "", rownames(allFC))
allFC$repeat_id <- gsub("^.*\\.*\\.", "", rownames(allFC))
allFC <- subset(allFC, select=c(logFC, sample, repeat_id))
allFC[,4] <- allFC$logFC
allFC <- subset(allFC, select=-logFC)
names(allFC)[3] <- "logFC"
fcDF <- dcast(allFC, repeat_id ~ sample)
rownames(fcDF) <- fcDF$repeat_id
fcDF <- subset(fcDF, select=-repeat_id)
fcDF <- na.omit(fcDF)
allFDR <- do.call("rbind", allGene)
allFDR$sample <- gsub("\\..*$", "", rownames(allFDR))
allFDR$repeat_id <- gsub("^.*\\.*\\.", "", rownames(allFDR))
allFDR <- subset(allFDR, select=c(FDR, sample, repeat_id))
allFDR[,4] <- allFDR$FDR
allFDR <- subset(allFDR, select=-FDR)
names(allFDR)[3] <- "FDR"
fdrDF <- dcast(allFDR, repeat_id ~ sample)
rownames(fdrDF) <- fdrDF$repeat_id
fdrDF <- subset(fdrDF, select=-repeat_id)
fdrDF <- na.omit(fdrDF)
par(mar=c(4,4,4,4))
library(grid)
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust =  0.5, hjust = 1, rot = 45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
# create FC pheatmap without column clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_no_colclustering_", names( allGene)[j], ".pdf"), width=10, height=10)
#pheatmap(fcDF, color = colorRampPalette(c("#08519C", "white",  "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")),  fontsize = 8,
#         cluster_cols=F)
#dev.off()
# create FC pheatmap with column clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_colclustering_", names(  allGene)[j], ".pdf"), width=10, height=10)
#pheatmap(fcDF, color = colorRampPalette(c("#08519C", "white",  "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")),  fontsize = 8,
#         scale="column")
#dev.off()
# create FDR pheatmap without column clustering:
logfdrDF <- log10(fdrDF)
interesting_fc <- fcDF %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(fdrDF < FDRthresh & fcDF > FCthresh|fcDF <  -FCthresh) >= 1) %>%
column_to_rownames('gene_id')
# create fdr for interesting repeats:
interesting_fdr <-  fdrDF[rownames(interesting_fc),]
# save interesting repeats:
saveRDS(rownames(interesting_fc), file=paste0(RobjectDir, "/interesting_fc.rds"))
if (nrow(interesting_fc) > 1) {
# FC without clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh,   "_colclustering.pdf"), width=10, height=10)
#pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white",  "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",  "")), fontsize = 8,
#         cluster_cols = F)
#dev.off()
# FC with clustering:
#pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh,   "_no_colclustering.pdf"), width=10, height=10)
#pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white",  "firebrick3"))(50),
#         display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",  "")), fontsize = 8,
#         cluster_cols = T)
#dev.off()
# FC with clustering, manual breaks:
paletteLength <- 50
myBreaks <- c(seq(min(fcDF), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(fcDF)/paletteLength, max(fcDF), length.out=floor( paletteLength/2)))
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = T)
dev.off()
#  pdf(file=paste0(plotDir, "/log2FC_HGSOC_sats_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
#                  ".pdf"), width=10, height=20)
#  pheatmap(int_sats, color = colorRampPalette(c("#08519C", "white"))(50),
#           display_numbers = as.matrix(ifelse(int_sat_fdr < 0.1, "*",   "")), fontsize = 8,
#           cluster_cols = T)
#  dev.off()
# FDR without clustering:
#log_interesting_fdr <- log10(interesting_fdr)
#pdf(file=paste0(plotDir, "/log10_FDR_HGSOC_heatmapFDR", FDRthresh,   "_colclustering_", names(allGene)[j], ".pdf"), width=10, height=10)
#pheatmap(logfdrDF, color = colorRampPalette(c("#08519C", "white"))(50),
#         display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")),  fontsize = 8,
#         cluster_cols = F)
#dev.off()
# FDR with clustering:
pdf(file=paste0(plotDir, "/log10_FDR_HGSOC_heatmapFDR", FDRthresh, "_FC",   FCthresh, "colclustering_", names(allGene)[j], ".pdf"), width=10,   height=10)
pheatmap(logfdrDF, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(fdrDF < 0.1, "*", "")),   fontsize = 8)
dev.off()
}
allGene
str(allGene)
interesting_fc
# FC with row clustering, manual breaks:
interesting_fc <- interesting_fc[c(3, 2, 4, 1)]
head(interesting_fc)
interesting_fc <- interesting_fc[c(3, 2, 4, 1)]
paletteLength <- 50
myBreaks <- c(seq(min(fcDF), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(fcDF)/paletteLength, max(fcDF), length.out=floor( paletteLength/2)))
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
head(interesting_fc)
# isolate most significant genes and create FC heatmap:
interesting_fc <- fcDF %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(fdrDF < FDRthresh & fcDF > FCthresh|fcDF <  -FCthresh) >= 1) %>%
column_to_rownames('gene_id')
# create fdr for interesting repeats:
interesting_fdr <-  fdrDF[rownames(interesting_fc),]
head(interesting_fc)
# FC with row clustering, manual breaks:
interesting_fc <- interesting_fc[c(3, 2, 4, 1)]
head(interesting_fc)
paletteLength <- 50
myBreaks <- c(seq(min(fcDF), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(fcDF)/paletteLength, max(fcDF), length.out=floor( paletteLength/2)))
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
subset(interesting_fc, select=-acquired_resistant_vs_ascites\ (n=11,23))
# FC with row clustering, manual breaks:
interesting_fc <- subset(interesting_fc, select=-acquired_resistant_vs_ascites (n=11,23))
head(interesting_fc)
subset(interesting_fc, select=-acquired_resistant_vs_ascites \\(n=11,23))
subset(interesting_fc, select=-acquired_resistant_vs_ascites\\ (n=11,23))
subset(interesting_fc, select=-acquired_resistant_vs_ascites \\ (n=11,23))
interesting_fc <- fcDF %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(fdrDF < FDRthresh & fcDF > FCthresh|fcDF <  -FCthresh) >= 1) %>%
column_to_rownames('gene_id')
# create fdr for interesting repeats:
interesting_fdr <-  fdrDF[rownames(interesting_fc),]
head(interesting_fc)
head(interesting_fc[, -1])
# FC with row clustering, manual breaks:
interesting_fc <- interesting_fc[, -1][c(2, 1, 3)]
head(interesting_fc)
dev.off()
dev.off()
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
dev.off()
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
interesting_fdr <- interesting_fdr[, -1][c(2, 1, 3)]
paletteLength <- 50
myBreaks <- c(seq(min(fcDF), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(fcDF)/paletteLength, max(fcDF), length.out=floor( paletteLength/2)))
pdf(file=paste0(plotDir, "/log2FC_HGSOC_heatmap_FDR", FDRthresh, "_FC",   FCthresh, "_colclustering_",
".pdf"), width=10, height=20)
pheatmap(interesting_fc, color = colorRampPalette(c("#08519C", "white"))(50),
display_numbers = as.matrix(ifelse(interesting_fdr < 0.1, "*",   "")), fontsize = 8,
cluster_cols = F)
dev.off()
rm(list=ls())
library(pasillaBamSubset)
> un3 <- untreated3_chr4()
install.packages("pasillaBamSubset")
# load packages needed:
library(DESeq)
library(tibble)
library(dplyr)
library(RColorBrewer)
library(EDASeq)
library(ggplot2)
library(ggrepel)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
descrip <- "htseq_single_HGSOCs_vs_FT"
# define sample group to use as control:
ctl <- "FT"
# specify what combination of repeat genes (repeats), epigenetic modulators (epiMods),
# RNAi genes (RNAi) and protein-coding genes (pCoding) should contribute to the results:
#resultTypes <- c("repeats", "epiMods")
resultTypes <- c("repeats")
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.05
FCthresh <- 0
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
rawDir <- paste0("/Users/jamestorpy/clusterHome2/projects/hgsoc_repeats/RNA-seq/raw_files")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", plotDir))
system(paste0("mkdir -p ", newRobjectDir))
#if (file.exists(paste0(RobjectDir, "/post_DESeq.RData"))) {
#	load(paste0(RobjectDir, "/post_DESeq.RData"))
#} else {
### 1. Load in all counts ###
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
gcCounts <- readRDS(paste0(RobjectDir,
"/gc_allcounts.htseq.rds"))
# append gcCounts to custom3Counts:
Counts <- rbind(custom3Counts, gcCounts)
# make rownames gene_id, get rid of latter column and change
# storage mode from factor to integer:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-gene_id)
# save Counts:
saveRDS(Counts, file=paste0(newRobjectDir, "/", Type, "_counts.RData"))
### 2. Perform pre-normalisation PCA and RLE plots ###
# eliminate lowly expressed genes (rows where there are less than 3 counts where df > 4):
print(paste0("No. rows before filtering is: ", nrow(Counts)))
Counts <- Counts %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(Counts > 5) >= (ncol(Counts)/3)) %>%
column_to_rownames('gene_id')
print(paste0("No. rows after  filtering: ", nrow(Counts)))
# create pre-normalised PCA plot from counts and plot:
if (ncol(Counts) > nrow(Counts)) {
pca <- prcomp(Counts)
} else {
pca <- princomp(Counts)
}
if (file.exists(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
plot(pca)
dev.off()
}
# remove pAF and remove categorisations of HGSOC samples:
Counts <- Counts[,-(grep("pAF", colnames(Counts)))]
#colnames(Counts) <- gsub("_[a-z][a-z][A-Z][A-Z]$", "", colnames(Counts))
# append '.2' onto duplicate patient IDs:
#colnames(Counts)[duplicated(colnames(Counts))] <- paste0(colnames(Counts)[duplicated(colnames(Counts))], ".2")
# change the order of columns of Counts to 0.1betical order of subtypes:
Counts <- Counts[,order(
gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
)]
# define sample groups:
splt <- unlist(
lapply(
split(
colnames(Counts), gsub(
"AOCS.*_[0-9][0-9][0-9]_FT", "FT", colnames(Counts)
)
), length
)
)
# save number of samples in each group:
saveRDS(splt, file = paste0(newRobjectDir, "/sample_no_per_cat.rds"))
# delist elements need to be delisted and change to integers:
Counts <- apply(Counts, 2, unlist)
storage.mode(Counts) <- "integer"
# add '.2' to IDs of samples with duplicate names:
colnames(Counts)[duplicated(colnames(Counts))] <- gsub("_HGSOC", ".2_HGSOC", colnames(Counts)[duplicated(colnames(Counts))])
#HGSOC <- colnames(Counts)[grep("FT", colnames(Counts), invert=T)]
HGSOC <- Counts[,grep("FT", colnames(Counts), invert=T)]
### 3. Split counts into FT vs each HGSOC data set and process separately ###
i=1
print(paste0("Processing sample number ", i, ", i.e. ", HGSOC[i]))
head(HGSOC)
print(paste0("Processing sample number ", i, ", i.e. ", rownames(HGSOC)[i]))
# define samplename and remove any brackets:
sName <- gsub("\\(|\\)", "", rownames(HGSOC)[i])
sNames
sName
!file.exists(paste0(RobjectDir, "/samAlign.rds"))
rm(list=ls())
library(rtracklayer)
library(GenomicRanges)
project <- "hgsoc_repeats"
Type <- "single-cell"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project, "/")
resultsDir <- paste0(projectDir, "/", Type, "/results/")
RobjectDir <- paste0(projectDir, "/", Type, "/results/")
genomeDir <- "/home/jamtor/genomes/scell/GRCh38_rp_w_artificial/"
system("mkdir -p $RobjectDir")
system(paste0("mkdir -p ", RobjectDir))
if ( !file.exists(paste0(RobjectDir, "/samAlign.rds")) ) {
print("Loading repeats annotation...")
annot <- import(paste0(genomeDir, "/repeats_CD3G.gtf"))
print("Loading sam file...")
sam <- read.table(file=paste0(resultsDir, "/4404_primary_rp_w_artificial/outs/possorted_genome_sam.sam", header=F, fill=T)
print("Saving image...")
save.image(paste0(RobjectDir, "/annot_and_sam_read.RData"))
print("Creating sam alignment object...")
samAlign <- readGAlignmentPairs(sam)
print("Saving sam alignment onbject...")
saveRDS(samAlign, paste0(RobjectDir, "/samAlign.rds"))
} else {
samAlign <- load(paste0(RobjectDir, "/samAlign.rds"))
}
print("Creating sam GR object...")
samGR <- GRanges(
seqnames=seqnames(samAlign),
ranges=IRanges(start(samAlign), end(samAlign)),
strand=strand(samAlign),
cigar=cigar(samAlign)
)
print("Saving sam GR object...")
saveRDS(samGR, paste0(RobjectDir, "/samGR.rds"))
if ( !file.exists(paste0(RobjectDir, "/samAlign.rds")) ) {
print("hey")
}
!file.exists(paste0(RobjectDir, "/samAlign.rds"))
RobjectDir
RobjectDir <- paste0(projectDir, "/", Type, "/RobjectDir/")
system(paste0("mkdir -p ", RobjectDir))
if ( !file.exists(paste0(RobjectDir, "/samAlign.rds")) ) {
print("hey")
}
print("Loading repeats annotation...")
