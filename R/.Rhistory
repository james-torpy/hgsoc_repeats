rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
}
countDFs <- readRDS(file = paste0(RobjectDir, "/", expName, "/", Type, "_RepeatCounts/all_",  Type, "RepeatCountDFs.rds"))
lSizes <- readRDS(paste0(RobjectDir, "/", expName, "/", "/lib", "Sizes.rds"))
lSizes <- readRDS(paste0(RobjectDir, "/", expName, "/", "/lib", "Size.rds"))
countDFs <- c(countDFs[1], countDFs[3:length(countDFs)])
# split dfs with rows > 8:
c=1
n=1
for (i in 1:length(countDFs)) {
if (nrow(countDFs[[i]]) > 8) {
if (c==1) {
spl <- split(countDFs[[i]], c( rep(1, round(nrow(countDFs[[i]])/3)), rep(2, round(nrow(countDFs[[i]])/3)), rep(3, (nrow(countDFs[[i]])-2*(round(nrow(countDFs[[i]])/3)))) ))
names(spl)[1:(n+2)] <- c(paste0(names(countDFs)[i], 1), paste0(names(countDFs)[i], 2), paste0(names(countDFs)[i], 3))
rmInd <- c(i)
} else {
spl <- c(spl,split(countDFs[[i]], c( rep(1, round(nrow(countDFs[[i]])/3)), rep(2, round(nrow(countDFs[[i]])/3)), rep(3, (nrow(countDFs[[i]])-2*(round(nrow(countDFs[[i]])/3)))) )))
names(spl)[n:(n+2)] <- c(paste0(names(countDFs)[i], 1), paste0(names(countDFs)[i], 2), paste0(names(countDFs)[i], 3))
rmInd[c] <- i
}
c=c+1
n=n+3
}
}
# check if any dfs did have rows > 10
if (exists("spl")) {
# subset Counts to include only dfs with rows < 10:
`%notin%` <- function(x,y) !(x %in% y)
ind <- seq(1:length(countDFs))[seq(1:length(countDFs)) %notin% rmInd]
# add merged dfs from above to Counts:
countDFs <- c(countDFs[ind], spl)
}
names(countDFs)
names(countDFs[[46]])
head(countDFs[[46]])
names(countDFs[[46]])
names(countDFs)
head(countDFs$L1MD3)
head(countDFs$L1MD)
countDFs$L1MD[3,]
countDFs$L1MD[4,]
countDFs[[46]][2,]
names(countDFs)
head(countDFs$other)
colnames(countDFs$other)
rownames(countDFs$other)
rownames(countDFs$other2)
rownames(countDFs[[17]])
rownames(countDFs[[18]])
rownames(countDFs[[19]])
(countDFs[[19]][1])
(countDFs[[19]][1,])
rownames(countDFs[[20]])
(countDFs[[20]][4,])
names(countDFs)
rownames(countDFs$AluJ)
countDFs$AluJ[,2]
countDFs$AluJ[2,]
countDFs$L1M
countDFs$L1M21
countDFs$L1M22
countDFs$L1M21
countDFs$L1M2
countDFs$L1M22
countDFs$L1M23
countDFs$L1M24
names(countDFs)
countsDF$L1M2*
)(;eDOAWKPS)
lapply(countDFs, names)
lapply(countDFs, ronames)
lapply(countDFs, rownames)
customDF <- data.frame(countDFs[[46]][2,], countDFs$L1MD[4,], countDFs[[19]][1,], countDFs[[20]][4,], countDFs$AluJ[2,], countDFs$L1M12[1,])
customDF
customDF <- t(data.frame(countDFs[[46]][2,], countDFs$L1MD[4,], countDFs[[19]][1,], countDFs[[20]][4,], countDFs$AluJ[2,], countDFs$L1M12[1,]))
customDF
countDFs[[46]][2,]
countDFs$L1MD[4,]
data.frame(countDFs[[46]][2,], countDFs$L1MD[4,], countDFs[[19]][1,], countDFs[[20]][4,], countDFs$AluJ[2,], countDFs$L1M12[1,])
customDF <- t(data.frame(countDFs[[46]][2,])
, countDFs$L1MD[4,], countDFs[[19]][1,], countDFs[[20]][4,], countDFs$AluJ[2,], countDFs$L1M12[1,]))
data.frame(countDFs[[46]][2,])
data.frame(countDFs[[46]][2,], countDFs$L1MD[4,])
countDFs$L1MD[4,]
class(countDFs[[46]][2,])
data.frame(as.vector(countDFs[[46]][2,]), as.vector(countDFs$L1MD[4,]))
as.vector(countDFs[[46]][2,])
as.vector(countDFs[[46]][2,])
class(as.vector(countDFs[[46]][2,]))
class(as.integer(countDFs[[46]][2,]))
as.integer(countDFs[[46]][2,])
data.frame(as.integer(countDFs[[46]][2,]), as.integer(countDFs$L1MD[4,]), as.integer(countDFs[[19]][1,]),
as.integer(countDFs[[20]][4,]), as.integer(countDFs$AluJ[2,]), as.integer(countDFs$L1M12[1,]))
t(data.frame(as.integer(countDFs[[46]][2,]), as.integer(countDFs$L1MD[4,]), as.integer(countDFs[[19]][1,]),
as.integer(countDFs[[20]][4,]), as.integer(countDFs$AluJ[2,]), as.integer(countDFs$L1M12[1,])))
countDFs[[46]][2,]
customDF <- t(data.frame(as.integer(countDFs[[46]][2,]), as.integer(countDFs$L1MD[4,]), as.integer(countDFs[[19]][1,]),
as.integer(countDFs[[20]][4,]), as.integer(countDFs$AluJ[2,]), as.integer(countDFs$L1M12[1,])))
rownames(customDF) <- c(rownames(countDFs[[46]][2,]), rownames(countDFs$L1MD[4,]), rownames(countDFs[[19]][1,]),
rownames(countDFs[[20]][4,]), rownames(countDFs$AluJ[2,]), rownames(countDFs$L1M12[1,]))
customDF
colnames(customDF) <- colnames(countDFs[[1]])
customDF
countDFs[[46]][2,])
countDFs[[46]][2,]
customDF[1,]
countDFs <- list(customDF)
countDFs
names(countDFs)
countDFs <- list(customDF)
names(countDFs) <- "custom"
j=1
for (Counts in countDFs) {
# calculate CPMs:
CPM <- as.data.frame(t(t(Counts)/lSizes)*1000000)
# calculate total repeat count size:
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# prepare each df for plotting:
typeNames <- c("CPM", "CPMR")
n=1
for (df in list(CPM, CPMR)) {
sampleNames <- colnames(df)
df <- sapply(df, as.numeric)
rownames(df) <- rownames(CPM)
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
# sort scpCounts data frames according to repeat_id:
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
# remove duplicate numbers:
pDF$sample <- gsub("[1-4]", "", pDF$sample)
# order levels of sample factor, putting controls first:
orderS <- function(x) {
x$sample <- factor(x$sample, levels=c("bowtell_FT", "gtx_ft", "grant_endo", "grant_endosis", "kur_v", "bowtell_PR"))
return(x)
}
pDF <- orderS(pDF)
# create stats summary of the data:
statDF <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
# add 1 to all values so they are loggable:
add2zero <- function(x) {
if (ncol(x) == 3) {
x[,3] <- x[,3]+1
return(x)
} else {
x[,2] <- x[,2]+1
return(x)
}
}
pDF4Log <- add2zero(pDF)
# create stats summary of the data:
statDF4Log <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
plot_itdf <- function(x, logNo="nope") {
if (ncol(x) == 7) {
p <- ggplot(x, aes(x=sample, y=x[,4], group=repeat_id, colour=repeat_id))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se, ymax=eval(parse(text=typeNames[n]))+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
} else {
p <- ggplot(x, aes(x=sample, y=x[,4], group = 1))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se-se, ymax=eval(parse(text=typeNames[n]))-se+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
}
}
pDFPlot <- plot_itdf(statDF)
pDFPlotLog10 <- plot_itdf(statDF4Log, logNo="log10")
if (file.exists(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"))) {
print(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"))
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"), width = 10, height=10)
print(pDFPlot)
dev.off()
}
if (file.exists(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf")) {
print(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf"), width = 10, height=10)
print(pDFPlotLog10)
dev.off()
}
n=n+1
}
j=j+1
}
j=1
for (Counts in countDFs) {
# calculate CPMs:
CPM <- as.data.frame(t(t(Counts)/lSizes)*1000000)
# calculate total repeat count size:
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# prepare each df for plotting:
typeNames <- c("CPM", "CPMR")
n=1
for (df in list(CPM, CPMR)) {
sampleNames <- colnames(df)
df <- sapply(df, as.numeric)
rownames(df) <- rownames(CPM)
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
# sort scpCounts data frames according to repeat_id:
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
# remove duplicate numbers:
pDF$sample <- gsub("[1-4]", "", pDF$sample)
# order levels of sample factor, putting controls first:
orderS <- function(x) {
x$sample <- factor(x$sample, levels=c("bowtell_FT", "gtx_ft", "grant_endo", "grant_endosis", "kur_v", "bowtell_PR"))
return(x)
}
pDF <- orderS(pDF)
# create stats summary of the data:
statDF <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
# add 1 to all values so they are loggable:
add2zero <- function(x) {
if (ncol(x) == 3) {
x[,3] <- x[,3]+1
return(x)
} else {
x[,2] <- x[,2]+1
return(x)
}
}
pDF4Log <- add2zero(pDF)
# create stats summary of the data:
statDF4Log <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
plot_itdf <- function(x, logNo="nope") {
if (ncol(x) == 7) {
p <- ggplot(x, aes(x=sample, y=x[,4], group=repeat_id, colour=repeat_id))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se, ymax=eval(parse(text=typeNames[n]))+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
} else {
p <- ggplot(x, aes(x=sample, y=x[,4], group = 1))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se-se, ymax=eval(parse(text=typeNames[n]))-se+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
}
}
pDFPlot <- plot_itdf(statDF)
pDFPlotLog10 <- plot_itdf(statDF4Log, logNo="log10")
if (file.exists(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"))) {
print(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"))
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf"), width = 10, height=10)
print(pDFPlot)
dev.off()
}
#if (file.exists(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf")) {
#  print(paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf already exists, no need to create"))
#} else {
print(paste0("Creating ", plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], "Log10.pdf"), width = 10, height=10)
print(pDFPlotLog10)
dev.off()
#}
n=n+1
}
j=j+1
}
Counts <- countDFs[[1]]
CPM <- as.data.frame(t(t(Counts)/lSizes)*1000000)
CPM
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
CPMR
typeNames <- c("CPM", "CPMR")
n=1
df <- CPMR
sampleNames <- colnames(df)
df <- sapply(df, as.numeric)
df
rownames(df) <- rownames(CPM)
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
pDF
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
pDF
pDF$sample <- gsub("^.*_", "", pDF$sample)
pDF
orderS <- function(x) {
x$sample <- factor(x$sample, levels=c("bowtell_FT", "gtx_ft", "grant_endo", "grant_endosis", "kur_v", "bowtell_PR"))
return(x)
}
pDF <- orderS(pDF)
# create stats summary of the data:
statDF <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
# add 1 to all values so they are loggable:
add2zero <- function(x) {
if (ncol(x) == 3) {
x[,3] <- x[,3]+1
return(x)
} else {
x[,2] <- x[,2]+1
return(x)
}
}
pDF4Log <- add2zero(pDF)
pDF4Log
sampleNames <- colnames(df)
df <- sapply(df, as.numeric)
rownames(df) <- rownames(CPM)
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
# sort scpCounts data frames according to repeat_id:
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
# remove patint info:
pDF$sample <- gsub("^.*_", "", pDF$sample)
CPM <- as.data.frame(t(t(Counts)/lSizes)*1000000)
# calculate total repeat count size:
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
n=1
df <- CPMR
sampleNames <- colnames(df)
df <- sapply(df, as.numeric)
rownames(df) <- rownames(CPM)
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
# sort scpCounts data frames according to repeat_id:
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
# remove patint info:
pDF$sample <- gsub("^.*_", "", pDF$sample)
unique(pDF$sample)
orderS <- function(x) {
x$sample <- factor(x$sample, levels=c("FT", "erPT", "mrPT", "arPT", "prPT", "rfPT", "msST", "pAF", "rcAF"))
return(x)
}
pDF <- orderS(pDF)
pDF
pDF <- pDF[-176,]
pDF
pDF <- pDF[-177,]
pDF
pDF <- melt(df, varnames = c("repeat_id", "sample"), value.name = typeNames[n])
# sort scpCounts data frames according to repeat_id:
sort_rID <- function(x) {
if (colnames(x)[1] == "repeat_id") {
return(x[with(x, order(repeat_id)),])
} else {
return(x)
}
}
pDF <- sort_rID(pDF)
# remove patint info:
pDF$sample <- gsub("^.*_", "", pDF$sample)
# order levels of sample factor, putting controls first:
orderS <- function(x) {
x$sample <- factor(x$sample, levels=c("FT", "erPT", "mrPT", "arPT", "prPT", "rfPT", "msST", "pAF", "rcAF"))
return(x)
}
pDF <- orderS(pDF)
pDF[!is.na(pDF$sample),]
pDF <- pDF[!is.na(pDF$sample),]
statDF <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
# add 1 to all values so they are loggable:
add2zero <- function(x) {
if (ncol(x) == 3) {
x[,3] <- x[,3]+1
return(x)
} else {
x[,2] <- x[,2]+1
return(x)
}
}
pDF4Log <- add2zero(pDF)
pDF4Log
statDF4Log <- summarySE(pDF, measurevar = typeNames[n], groupvar = c("repeat_id", "sample"))
plot_itdf <- function(x, logNo="nope") {
if (ncol(x) == 7) {
p <- ggplot(x, aes(x=sample, y=x[,4], group=repeat_id, colour=repeat_id))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se, ymax=eval(parse(text=typeNames[n]))+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
} else {
p <- ggplot(x, aes(x=sample, y=x[,4], group = 1))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se-se, ymax=eval(parse(text=typeNames[n]))-se+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
}
}
pDFPlotLog10 <- plot_itdf(statDF4Log, logNo="log10")
pDFPlotLog10
pDFPlot <- plot_itdf(statDF)
pDFPlot
pDFPlotLog10
n=1
n=2
plot_itdf <- function(x, logNo="nope") {
if (ncol(x) == 7) {
p <- ggplot(x, aes(x=sample, y=x[,4], group=repeat_id, colour=repeat_id))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se, ymax=eval(parse(text=typeNames[n]))+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
} else {
p <- ggplot(x, aes(x=sample, y=x[,4], group = 1))
p <- p + geom_errorbar(aes(ymin=eval(parse(text=typeNames[n]))-se-se, ymax=eval(parse(text=typeNames[n]))-se+se), width=0.1)
p <- p + geom_line()
p <- p + theme(axis.text.x = element_text(angle = 90), legend.position = "bottom")
p <- p + ylab(typeNames[n])
if (logNo=="log10") {
p <- p + scale_y_log10()
return(p)
} else {
return(p)
}
}
}
pDFPlot <- plot_itdf(statDF)
pDFPlotLog10 <- plot_itdf(statDF4Log, logNo="log10")
pDFPlotLog10
n=1
pDFPlotLog10 <- plot_itdf(statDF4Log, logNo="log10")
pDFPlotLog10
paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", typeNames[n], ".pdf")
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_", cutsom, "_Log10.pdf"), width = 10, height=10)
print(pDFPlotLog10)
dev.off()
pdf(file = paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_custom_Log10.pdf"), width = 10, height=10)
print(pDFPlotLog10)
dev.off()
paste0(plotDir, "/", Type, "_", names(countDFs)[j], "_custom_Log10.pdf")
head(Counts)
colnames(Counts)
